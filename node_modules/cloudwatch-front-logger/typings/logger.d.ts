/// <reference types="node" />
import { InputLogEvent } from '@aws-sdk/client-cloudwatch-logs';
import { Level, StorageInterface, ConsoleInterface, MessageFormatter, LogStreamNameResolver, InstallOptions, ErrorInfo, ClientInterface } from './types';
export default class Logger {
    protected readonly accessKeyId: string;
    protected readonly secretAccessKey: string;
    protected readonly region: string;
    protected readonly logGroupName: string;
    protected static readonly namespace: string;
    protected static readonly defaultLogStreamName: string;
    protected levels: Level[];
    protected interval: number;
    protected muting: boolean;
    protected enabled: boolean;
    protected logStreamNameResolver?: LogStreamNameResolver;
    protected messageFormatter?: MessageFormatter;
    protected client?: ClientInterface;
    protected storage?: StorageInterface;
    protected console?: ConsoleInterface;
    protected events: InputLogEvent[];
    protected intervalId?: NodeJS.Timeout | number;
    /**
     * Constructor.
     *
     * @param accessKeyId     - AWS Access Key ID
     * @param secretAccessKey - AWS Secret Access Key
     * @param region          - AWS Region (e.g. ap-northeast-1)
     * @param logGroupName    - AWS CloudWatch Log Group Name
     */
    constructor(accessKeyId: string, secretAccessKey: string, region: string, logGroupName: string);
    /**
     * Set level.
     *
     * @param levels - Reported error level
     */
    setLevels(levels: Level[]): this;
    /**
     * Set interval.
     *
     * @param interval - Interval milliseconds for sending logs
     */
    setInterval(interval: number): this;
    /**
     * Mute logging in browser console.
     */
    mute(): this;
    /**
     * Resume logging in browser console.
     */
    unmute(): this;
    /**
     * Enable collecting errors and sending to AWS CloudWatch.
     */
    enable(): this;
    /**
     * Disable collecting errors and sending to AWS CloudWatch.
     */
    disable(): this;
    /**
     * Bootstrap Logger.
     *
     * @param logStreamNameResolver - Resolve logStreamName for current user (e.g. Canvas Fingerprint)
     * @param messageFormatter      - Format message string from Error
     * @param Ctor
     * @param storage
     * @param globalConsole
     * @param eventTarget
     */
    install({ logStreamNameResolver, messageFormatter, ClientConstructor: Ctor, storage, console: globalConsole, eventTarget, }?: InstallOptions): void;
    /**
     * Queue a new error.
     *
     * @param e    - Error object
     * @param info - Extra Error Info (Consider using "type" field)
     */
    onError(e: unknown, info?: ErrorInfo): Promise<void>;
    /**
     * Send queued errors.
     */
    onInterval(): Promise<void>;
    protected getClient(): ClientInterface;
    protected getStorage(): StorageInterface;
    protected getConsole(): ConsoleInterface;
    protected setCache(key: string, value: string): Promise<void>;
    protected getCache(key: string): Promise<string | null>;
    protected deleteCache(key: string): Promise<void>;
    protected refresh(): Promise<void>;
    protected getLogStreamName(): Promise<string | null>;
    protected static isValidError<E = Error>(value: unknown): value is E;
}
