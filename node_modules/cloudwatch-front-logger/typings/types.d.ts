import { CloudWatchLogsClient, CloudWatchLogsClientConfig } from '@aws-sdk/client-cloudwatch-logs';
export interface LogStreamNameResolver {
    (): string | Promise<string>;
}
export interface MessageFormatter {
    (e: Error, info?: ErrorInfo): string | null | Promise<string | null>;
}
export interface ErrorInfo {
    [key: string]: any;
}
export interface InstallOptions {
    logStreamNameResolver?: LogStreamNameResolver;
    messageFormatter?: MessageFormatter;
    ClientConstructor?: ClientConstructor;
    storage?: StorageInterface;
    console?: ConsoleInterface;
    eventTarget?: EventTarget;
}
export declare type Level = 'debug' | 'info' | 'log' | 'warn' | 'error';
export interface ConsoleInterface {
    debug(message?: any, ...optionalParams: any[]): void;
    info(message?: any, ...optionalParams: any[]): void;
    log(message?: any, ...optionalParams: any[]): void;
    warn(message?: any, ...optionalParams: any[]): void;
    error(message?: any, ...optionalParams: any[]): void;
}
export interface StorageInterface {
    getItem(key: string): string | null | Promise<string | null>;
    removeItem(key: string): void | Promise<void>;
    setItem(key: string, value: string): void | Promise<void>;
}
export interface ClientConstructor {
    new (options: CloudWatchLogsClientConfig): ClientInterface;
}
export interface ClientInterface {
    send: CloudWatchLogsClient['send'];
}
export interface AWSError extends Error {
    name: string;
    message: string;
    expectedSequenceToken?: string;
}
